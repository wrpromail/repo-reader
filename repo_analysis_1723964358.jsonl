{"request_meta": {"code_file_path": "main.py"}, "structured": {"isImportant": true, "functions": "The main.py file is the entry point of the FastAPI application. It sets up the application, includes the API router, adds middleware for CORS, registers the Redis and Neo4j databases, and initializes the Minio database. It also handles exceptions and serves static files. The file also starts the Uvicorn server to run the application.", "keyObjects": ["FastAPI", "api_router", "CORSMiddleware", "registerRedis", "registerNeo4j", "customExceptions", "InitMinio"]}, "token_usage": {"completion_tokens": 292, "prompt_tokens": 1310, "total_tokens": 1602}, "elapsed_time": 8161.942720413208}
{"request_meta": {"code_file_path": "apps\\const.py"}}
{"request_meta": {"code_file_path": "apps\\params.py"}, "structured": {"isImportant": true, "functions": "This file defines several data models used in the application. These models are used for data validation and serialization/deserialization. The models include SearchResp, PaginationResp, SearchTeachersPageData, GraphTransferParam, GetTransferHistoryData, UserRoleResp, and LoginResp. These models are used in various parts of the application for handling user authentication, data transfer, and search functionalities.", "keyObjects": ["SearchResp", "PaginationResp", "SearchTeachersPageData", "GraphTransferParam", "GetTransferHistoryData", "UserRoleResp", "LoginResp"]}, "token_usage": {"completion_tokens": 252, "prompt_tokens": 1239, "total_tokens": 1491}, "elapsed_time": 6991.543769836426}
{"request_meta": {"code_file_path": "apps\\routers.py"}, "structured": {"isImportant": true, "functions": "Acts as the main router for the backend, including routers from different modules such as education, user, permission, and system.", "keyObjects": ["edu_router", "user_router", "auth_router", "system_router"]}, "token_usage": {"completion_tokens": 209, "prompt_tokens": 778, "total_tokens": 987}, "elapsed_time": 5346.615314483643}
{"request_meta": {"code_file_path": "apps\\edu\\routers.py"}, "structured": {"isImportant": true, "functions": "Defines API endpoints for the education platform's backend by including other routers for files, graphs, graph applications, and tasks.", "keyObjects": ["APIRouter", "files_router", "graphs_router", "graph_app_router", "tasks_router"]}, "token_usage": {"completion_tokens": 263, "prompt_tokens": 812, "total_tokens": 1075}, "elapsed_time": 6695.954084396362}
{"request_meta": {"code_file_path": "apps\\edu\\curd\\background_curd.py"}}
{"request_meta": {"code_file_path": "apps\\edu\\curd\\minio_curd.py"}, "structured": {"isImportant": true, "functions": "Uploading graph excel files, test images to a MinIO storage service, and generating a presigned URL for a test image", "keyObjects": ["MinioCurd", "MinioBaseCurd", "MinioConst"]}, "token_usage": {"completion_tokens": 247, "prompt_tokens": 1246, "total_tokens": 1493}, "elapsed_time": 6870.144844055176}
{"request_meta": {"code_file_path": "apps\\edu\\curd\\mysql_curd.py"}}
{"request_meta": {"code_file_path": "apps\\edu\\curd\\neo4j_curd.py"}}
{"request_meta": {"code_file_path": "apps\\edu\\curd\\redis_curd.py"}, "structured": {"isImportant": true, "functions": "The RedisCurd class provides methods to perform operations such as converting a set to a list, getting graph captcha for a user, and setting graph captcha for a user.", "keyObjects": ["RedisCurd", "set_to_list", "get_graph_captcha", "set_graph_captcha"]}, "token_usage": {"completion_tokens": 324, "prompt_tokens": 1085, "total_tokens": 1409}, "elapsed_time": 8695.908069610596}
{"request_meta": {"code_file_path": "apps\\edu\\curd\\__init__.py"}, "structured": {"isImportant": true, "functions": "Imports and initializes various CRUD (Create, Read, Update, Delete) operations for different data sources such as MySQL, Neo4j, Redis, Minio, and Background.", "keyObjects": ["MysqlCurd", "NewMysqlCurd", "Neo4jCurd", "RedisCurd", "MinioCurd", "BackgroundCurd"]}, "token_usage": {"completion_tokens": 256, "prompt_tokens": 718, "total_tokens": 974}, "elapsed_time": 6464.115381240845}
{"request_meta": {"code_file_path": "apps\\edu\\models\\data_models.py"}, "structured": {"isImportant": true, "functions": "Defines the 'ConstDataModel' class for storing enumeration values and constant values. Manages data labels, keys, and values.", "keyObjects": ["ConstDataModel", "data_label", "data_key", "data_value", "parent_id", "comment"]}, "token_usage": {"completion_tokens": 255, "prompt_tokens": 883, "total_tokens": 1138}, "elapsed_time": 6517.444849014282}
{"request_meta": {"code_file_path": "apps\\edu\\models\\file_models.py"}}
{"request_meta": {"code_file_path": "apps\\edu\\models\\graph_models.py"}}
{"request_meta": {"code_file_path": "apps\\edu\\models\\task_models.py"}}
{"request_meta": {"code_file_path": "apps\\edu\\models\\__init__.py"}, "structured": {"isImportant": true, "functions": "This file initializes and imports various models used for managing data, graph structures, files, and tasks in the educational platform's backend.", "keyObjects": ["ConstDataModel", "GraphModel", "GraphFilesModel", "GraphTaskModel"]}, "token_usage": {"completion_tokens": 396, "prompt_tokens": 798, "total_tokens": 1194}, "elapsed_time": 10261.467695236206}
{"request_meta": {"code_file_path": "apps\\edu\\views\\bodys.py"}}
{"request_meta": {"code_file_path": "apps\\edu\\views\\file_view.py"}}
{"request_meta": {"code_file_path": "apps\\edu\\views\\graph_application_view.py"}}
{"request_meta": {"code_file_path": "apps\\edu\\views\\graph_view.py"}}
{"request_meta": {"code_file_path": "apps\\edu\\views\\task_view.py"}}
{"request_meta": {"code_file_path": "apps\\edu\\views\\view_funcs.py"}, "structured": {"isImportant": true, "functions": "The code file contains a static method 'graph_excel_validation' which validates an uploaded Excel file. It checks if the file is an xlsx file, verifies the presence of six specific worksheets, validates the labels in the worksheets, and checks for the presence of a curriculum entity.", "keyObjects": ["Files", "graph_excel_validation"]}, "token_usage": {"completion_tokens": 262, "prompt_tokens": 1328, "total_tokens": 1590}, "elapsed_time": 7315.377473831177}
{"request_meta": {"code_file_path": "apps\\permission\\schemas.py"}}
{"request_meta": {"code_file_path": "apps\\permission\\views.py"}}
{"request_meta": {"code_file_path": "apps\\permission\\curd\\curd_menu.py"}}
{"request_meta": {"code_file_path": "apps\\permission\\curd\\curd_perm_label.py"}}
{"request_meta": {"code_file_path": "apps\\permission\\curd\\curd_role.py"}, "structured": {"isImportant": true, "functions": "Manages CRUD operations for roles, including creating, retrieving, searching, and setting role menus. Also provides a method for getting a select list of roles based on their status.", "keyObjects": ["Roles", "RoleMenu", "Menus"]}, "token_usage": {"completion_tokens": 183, "prompt_tokens": 1620, "total_tokens": 1803}, "elapsed_time": 5551.960706710815}
{"request_meta": {"code_file_path": "apps\\permission\\curd\\curd_user.py"}}
{"request_meta": {"code_file_path": "apps\\permission\\curd\\__init__.py"}}
{"request_meta": {"code_file_path": "apps\\permission\\models\\menu.py"}, "structured": {"isImportant": true, "functions": "Defines the menu table in the database, storing information about routes, components, status, order, name, title, icon, and cache settings of various menu items.", "keyObjects": ["Menus"]}, "token_usage": {"completion_tokens": 296, "prompt_tokens": 1026, "total_tokens": 1322}, "elapsed_time": 7647.83239364624}
{"request_meta": {"code_file_path": "apps\\permission\\models\\perm_label.py"}, "structured": {"isImportant": true, "functions": "Defines the database models for permission labels and the relationship between permission labels and roles", "keyObjects": ["PermLabel", "PermLabelRole"]}, "token_usage": {"completion_tokens": 172, "prompt_tokens": 915, "total_tokens": 1087}, "elapsed_time": 4513.966083526611}
{"request_meta": {"code_file_path": "apps\\permission\\models\\role.py"}, "structured": {"isImportant": true, "functions": "Defines roles and their associated permissions in the educational platform's backend. Allows for the creation, modification, and deletion of roles and the management of their associated menus.", "keyObjects": ["Roles", "RoleMenu"]}, "token_usage": {"completion_tokens": 267, "prompt_tokens": 955, "total_tokens": 1222}, "elapsed_time": 6856.182336807251}
{"request_meta": {"code_file_path": "apps\\permission\\models\\user.py"}, "structured": {"isImportant": true, "functions": "Defines the 'Users' and 'UserRole' models for managing user data and their roles in the educational platform.", "keyObjects": ["Users", "UserRole"]}, "token_usage": {"completion_tokens": 202, "prompt_tokens": 1182, "total_tokens": 1384}, "elapsed_time": 5425.362825393677}
{"request_meta": {"code_file_path": "apps\\permission\\models\\__init__.py"}, "structured": {"isImportant": true, "functions": "This file initializes the permission module by importing classes that manage user roles, permissions, and menus. It exports these classes for use in other parts of the application.", "keyObjects": ["Menus", "Roles", "Users", "PermLabel", "UserRole", "PermLabelRole", "RoleMenu"]}, "token_usage": {"completion_tokens": 279, "prompt_tokens": 717, "total_tokens": 996}, "elapsed_time": 7020.272731781006}
{"request_meta": {"code_file_path": "apps\\system\\schemas.py"}}
{"request_meta": {"code_file_path": "apps\\system\\views.py"}}
{"request_meta": {"code_file_path": "apps\\system\\curd\\curd_config_setting.py"}, "structured": {"isImportant": true, "functions": "Provides CRUD operations for the 'ConfigSettings' model. It includes a method to retrieve a configuration setting by its key.", "keyObjects": ["ConfigSettings", "CURDConfigSetting"]}, "token_usage": {"completion_tokens": 217, "prompt_tokens": 843, "total_tokens": 1060}, "elapsed_time": 5851.579666137695}
{"request_meta": {"code_file_path": "apps\\system\\curd\\curd_dict_data.py"}}
{"request_meta": {"code_file_path": "apps\\system\\curd\\curd_dict_detail.py"}, "structured": {"isImportant": true, "functions": "Provides CRUD operations for dictionary details in a database. Includes a method to retrieve the maximum order number for a given dictionary data ID.", "keyObjects": ["CURDDictDetail", "get_max_order_num"]}, "token_usage": {"completion_tokens": 195, "prompt_tokens": 831, "total_tokens": 1026}, "elapsed_time": 5003.639698028564}
{"request_meta": {"code_file_path": "apps\\system\\curd\\__init__.py"}}
{"request_meta": {"code_file_path": "apps\\system\\models\\config_settings.py"}, "structured": {"isImportant": true, "functions": "Defines a configuration settings model for the educational platform's backend. Stores various parameters used to configure the system.", "keyObjects": ["ConfigSettings", "name", "key", "value", "remark", "status", "order_num"]}, "token_usage": {"completion_tokens": 182, "prompt_tokens": 860, "total_tokens": 1042}, "elapsed_time": 4693.595170974731}
{"request_meta": {"code_file_path": "apps\\system\\models\\dictionaries.py"}, "structured": {"isImportant": true, "functions": "Defines the structure of two related database tables for storing and managing data dictionaries and their associated values.", "keyObjects": ["DictDetails", "DictData"]}, "token_usage": {"completion_tokens": 294, "prompt_tokens": 1161, "total_tokens": 1455}, "elapsed_time": 7707.576751708984}
{"request_meta": {"code_file_path": "apps\\system\\models\\__init__.py"}, "structured": {"isImportant": true, "functions": "This file is used to import two classes, 'ConfigSettings' and 'DictData' and 'DictDetails', from other modules. These classes are likely to be used for managing configuration settings and dictionaries, which are crucial for the platform's functionality.", "keyObjects": ["ConfigSettings", "DictData", "DictDetails"]}, "token_usage": {"completion_tokens": 248, "prompt_tokens": 666, "total_tokens": 914}, "elapsed_time": 6232.335567474365}
{"request_meta": {"code_file_path": "apps\\user\\views.py"}}
{"request_meta": {"code_file_path": "apps\\user\\curd\\curd_user.py"}}
{"request_meta": {"code_file_path": "apps\\user\\curd\\__init__.py"}}
{"request_meta": {"code_file_path": "apps\\user\\schemas\\token_schemas.py"}, "structured": {"isImportant": false, "functions": "Defines the schema for tokens used in the application for authentication and authorization purposes.", "keyObjects": ["Token", "TokenPayload"]}, "token_usage": {"completion_tokens": 149, "prompt_tokens": 694, "total_tokens": 843}, "elapsed_time": 3826.1878490448}
{"request_meta": {"code_file_path": "apps\\user\\schemas\\user_info_schemas.py"}, "structured": {"isImportant": true, "functions": "Defines schemas for user-related operations such as login, registration, password recovery, and user information changes.", "keyObjects": ["LoginUserInfoSchema", "RegisterUserInfoSchema", "ForgetPasswordSubmitSchema", "ForgetPasswordSetPasswordSchema", "ChangeUserInfoSchema", "ChangePasswordSchema", "UserAvailabilitySchema"]}, "token_usage": {"completion_tokens": 271, "prompt_tokens": 964, "total_tokens": 1235}, "elapsed_time": 6966.038465499878}
{"request_meta": {"code_file_path": "apps\\user\\schemas\\__init__.py"}}
{"request_meta": {"code_file_path": "common\\curd_base.py"}}
{"request_meta": {"code_file_path": "common\\deps.py"}, "structured": {"isImportant": true, "functions": ["get_email_sender", "check_jwt_token", "get_current_user", "get_current_user_id", "get_current_user_id_if_not_limited_privilege", "user_perm", "get_ipaddress"], "keyObjects": ["jwt", "curd_user", "curd_perm_label", "Session", "Request", "Redis"]}, "token_usage": {"completion_tokens": 298, "prompt_tokens": 1889, "total_tokens": 2187}, "elapsed_time": 8644.326210021973}
{"request_meta": {"code_file_path": "common\\error_code.py"}, "structured": {"isImportant": true, "functions": "This file defines various error codes and messages used in the application. It is used to handle errors and exceptions that may occur during the execution of the application. The error codes are categorized based on the module or functionality they belong to, such as user, knowledge graph, WeChat mini-program, knowledge task, algorithm task, question and answer, and file.", "keyConcepts": ["error codes", "error messages", "user", "knowledge graph", "WeChat mini-program", "knowledge task", "algorithm task", "question and answer", "file"]}, "token_usage": {"completion_tokens": 139, "prompt_tokens": 2008, "total_tokens": 2147}, "elapsed_time": 4658.008575439453}
{"request_meta": {"code_file_path": "common\\exceptions.py"}, "structured": {"isImportant": true, "functions": "Defines custom exceptions for a FastAPI application, including UserTokenError, UserPermError, and ApiException. Also overrides the default exception handlers for HTTPException and RequestValidationError to return custom error messages and status codes.", "keyObjects": ["CustomErrorBase", "UserTokenError", "UserPermError", "ApiException"]}, "token_usage": {"completion_tokens": 173, "prompt_tokens": 1138, "total_tokens": 1311}, "elapsed_time": 4982.553243637085}
{"request_meta": {"code_file_path": "common\\resp.py"}}
{"request_meta": {"code_file_path": "common\\security.py"}, "structured": {"isImportant": true, "functions": "Creates access tokens, verifies passwords, hashes passwords, and generates MD5 hashed passwords. These functions are used for secure user authentication and authorization.", "keyObjects": ["create_access_token", "verify_password", "get_password_hash", "get_md5_password"]}, "token_usage": {"completion_tokens": 185, "prompt_tokens": 1068, "total_tokens": 1253}, "elapsed_time": 4958.24408531189}
{"request_meta": {"code_file_path": "common\\__init__.py"}}
{"request_meta": {"code_file_path": "core\\config.py"}}
{"request_meta": {"code_file_path": "core\\constants.py"}}
{"request_meta": {"code_file_path": "core\\constants_dev.py"}, "structured": {"isImportant": true, "functions": "Defines constants used in the application, such as the environment file name, graph update interval, and MySQL database configuration.", "keyObjects": ["GRAPH_AUTO_UPDATE_INTERVAL", "MYSQL_ECHO", "MYSQL_POOL_SIZE", "MYSQL_POOL_MAX_OVERFLOW"]}, "token_usage": {"completion_tokens": 284, "prompt_tokens": 774, "total_tokens": 1058}, "elapsed_time": 7492.997646331787}
{"request_meta": {"code_file_path": "core\\constants_pre.py"}, "structured": {"isImportant": true, "functions": "Defines constants used throughout the repository, including the environment file name, graph update interval, and MySQL settings.", "keyObjects": ["GRAPH_AUTO_UPDATE_INTERVAL", "MYSQL_ECHO", "MYSQL_POOL_SIZE", "MYSQL_POOL_MAX_OVERFLOW"]}, "token_usage": {"completion_tokens": 240, "prompt_tokens": 774, "total_tokens": 1014}, "elapsed_time": 6103.1646728515625}
{"request_meta": {"code_file_path": "core\\constants_pro.py"}, "structured": {"isImportant": true, "functions": "Defines constants for the environment file, task scheduling, and MySQL database configuration.", "keyObjects": ["GRAPH_AUTO_UPDATE_INTERVAL", "MYSQL_POOL_SIZE", "MYSQL_POOL_MAX_OVERFLOW"]}, "token_usage": {"completion_tokens": 217, "prompt_tokens": 775, "total_tokens": 992}, "elapsed_time": 5541.106700897217}
{"request_meta": {"code_file_path": "core\\logger.py"}, "structured": {"isImportant": true, "functions": "Sets up the logging configuration for the application. Ensures that the necessary log files are created and prepared. Loads the logging configuration from a JSON file and applies it to the application. Falls back to using a basic logging configuration if the logging configuration file does not exist.", "keyObjects": ["logging.config", "os", "json", "settings", "logging.getLogger"]}, "token_usage": {"completion_tokens": 295, "prompt_tokens": 1148, "total_tokens": 1443}, "elapsed_time": 7748.448848724365}
{"request_meta": {"code_file_path": "core\\__init__.py"}}
{"request_meta": {"code_file_path": "db\\base_curd.py"}}
{"request_meta": {"code_file_path": "db\\databases.py"}, "structured": {"isImportant": true, "functions": "Manages database connections for MySQL, Neo4j, and Redis. Ensures proper closure of connections to free up resources. Provides a method for executing raw SQL queries on the MySQL database.", "keyObjects": ["DatabaseBase", "Session", "Graph", "Redis"]}, "token_usage": {"completion_tokens": 198, "prompt_tokens": 1201, "total_tokens": 1399}, "elapsed_time": 5345.248460769653}
{"request_meta": {"code_file_path": "db\\__init__.py"}}
{"request_meta": {"code_file_path": "db\\db_minio\\minio_base.py"}, "structured": {"isImportant": true, "functions": "Sets up a connection to a MinIO server for object storage", "keyObjects": ["Minio", "settings"]}, "token_usage": {"completion_tokens": 231, "prompt_tokens": 742, "total_tokens": 973}, "elapsed_time": 5858.792066574097}
{"request_meta": {"code_file_path": "db\\db_minio\\minio_base_curd.py"}}
{"request_meta": {"code_file_path": "db\\db_minio\\minio_const.py"}, "structured": {"isImportant": true, "functions": "Defines the names of the buckets used in a Minio storage system", "keyObjects": ["MinioConst", "all_buckets"]}, "token_usage": {"completion_tokens": 273, "prompt_tokens": 862, "total_tokens": 1135}, "elapsed_time": 7258.333206176758}
{"request_meta": {"code_file_path": "db\\db_minio\\__init__.py"}, "structured": {"isImportant": true, "functions": "The InitMinio class initializes and sets up the MinIO buckets used in the application. It includes methods to set bucket policies, initialize buckets, and run the initialization process.", "keyObjects": ["InitMinio", "minio_client", "MinioConst"]}, "token_usage": {"completion_tokens": 292, "prompt_tokens": 1358, "total_tokens": 1650}, "elapsed_time": 7796.030044555664}
{"request_meta": {"code_file_path": "db\\db_mysql\\base_curd.py"}, "structured": {"isImportant": true, "functions": "Handles MySQL transactions and provides methods for converting raw SQL query results into dictionaries and generating safe IN clause SQL statements", "keyObjects": ["MysqlBaseCurd", "MysqlBaseCurd.row_to_dict", "MysqlBaseCurd.safe_in_clause"]}, "token_usage": {"completion_tokens": 267, "prompt_tokens": 1450, "total_tokens": 1717}, "elapsed_time": 7241.777420043945}
{"request_meta": {"code_file_path": "db\\db_mysql\\base_model.py"}}
{"request_meta": {"code_file_path": "db\\db_mysql\\mysql_base.py"}, "structured": {"isImportant": true, "functions": "Sets up the database connection for the backend of an educational platform. It creates a SQLAlchemy engine, a sessionmaker, and a generator function to manage database sessions.", "keyObjects": ["create_engine", "sessionmaker", "get_mysql"]}, "token_usage": {"completion_tokens": 239, "prompt_tokens": 872, "total_tokens": 1111}, "elapsed_time": 6421.801328659058}
{"request_meta": {"code_file_path": "db\\db_mysql\\__init__.py"}, "structured": {"isImportant": true, "functions": "Initializes the MySQL database connection and imports necessary modules and functions for database operations.", "keyObjects": ["SessionLocal", "engine", "get_mysql", "Base", "AbstractBaseModel", "AbstractOldBase", "mysql_transaction", "MysqlBaseCurd"]}, "token_usage": {"completion_tokens": 254, "prompt_tokens": 702, "total_tokens": 956}, "elapsed_time": 6417.156934738159}
{"request_meta": {"code_file_path": "db\\db_neo4j\\base_curd.py"}}
{"request_meta": {"code_file_path": "db\\db_neo4j\\neo4j_base.py"}, "structured": {"isImportant": true, "functions": "Sets up a connection to a Neo4j database and mounts it to the app object at startup. Also retrieves the Neo4j graph database from the app object.", "keyObjects": ["registerNeo4j", "get_neo4j"]}, "token_usage": {"completion_tokens": 271, "prompt_tokens": 823, "total_tokens": 1094}, "elapsed_time": 7190.807819366455}
{"request_meta": {"code_file_path": "db\\db_neo4j\\neo4j_const.py"}}
{"request_meta": {"code_file_path": "db\\db_neo4j\\schemas.py"}}
{"request_meta": {"code_file_path": "db\\db_neo4j\\__init__.py"}, "structured": {"isImportant": true, "functions": "Initializes the Neo4j database module and imports necessary functions for registering Neo4j and getting Neo4j instance. Also imports the BaseNeo4jCurd class for base CRUD operations.", "keyObjects": ["registerNeo4j", "get_neo4j", "BaseNeo4jCurd"]}, "token_usage": {"completion_tokens": 264, "prompt_tokens": 690, "total_tokens": 954}, "elapsed_time": 6648.2367515563965}
{"request_meta": {"code_file_path": "db\\db_redis\\redis_base.py"}, "structured": {"isImportant": true, "functions": "Registers Redis to the app object, gets the connection at startup, and closes the connection at shutdown. Also provides a function to get the Redis instance from a request.", "keyObjects": ["Redis", "from_url", "FastAPI", "Request"]}, "token_usage": {"completion_tokens": 163, "prompt_tokens": 889, "total_tokens": 1052}, "elapsed_time": 4291.293382644653}
{"request_meta": {"code_file_path": "db\\db_redis\\__init__.py"}, "structured": {"isImportant": true, "functions": "Manages Redis databases by importing functions from the 'redis_base' module. This includes registering and retrieving Redis databases.", "keyObjects": ["registerRedis", "get_redis"]}, "token_usage": {"completion_tokens": 292, "prompt_tokens": 670, "total_tokens": 962}, "elapsed_time": 7327.656030654907}
{"request_meta": {"code_file_path": "utils\\algorithm.py"}, "structured": {"is_important": true, "reason": "The code file contains utility functions that are used throughout the codebase to perform various text processing and similarity calculations. These functions are used to compare and align data, which is a critical operation in the overall functionality of the project."}, "token_usage": {"completion_tokens": 185, "prompt_tokens": 2010, "total_tokens": 2195}, "elapsed_time": 5518.298864364624}
{"request_meta": {"code_file_path": "utils\\captcha_code.py"}, "structured": {"isImportant": true, "functions": "Generates captcha images with adjustable noise dots, and provides functions to generate captcha codes and base64-encoded captcha images.", "keyObjects": ["CustomImageCaptcha", "create_code", "create_base64_code"]}, "token_usage": {"completion_tokens": 411, "prompt_tokens": 1182, "total_tokens": 1593}, "elapsed_time": 10951.18236541748}
{"request_meta": {"code_file_path": "utils\\email.py"}, "structured": {"isImportant": true, "functions": "Validates email addresses and sends emails using SMTP. The class `EmailSender` has methods to set the template path, render templates, and send emails.", "keyObjects": ["email_format_checker", "EmailSender"]}, "token_usage": {"completion_tokens": 200, "prompt_tokens": 1325, "total_tokens": 1525}, "elapsed_time": 5466.328382492065}
{"request_meta": {"code_file_path": "utils\\encrypt.py"}, "structured": {"isImportant": true, "functions": "get_uuid: Generates a unique identifier (UUID). get_random_string: Generates a random string of a specified length with options for including numbers, uppercase letters, and lowercase letters.", "keyObjects": ["get_uuid", "get_random_string"]}, "token_usage": {"completion_tokens": 172, "prompt_tokens": 960, "total_tokens": 1132}, "elapsed_time": 4525.651931762695}
{"request_meta": {"code_file_path": "utils\\metrics.py"}, "structured": {"isImportant": true, "functions": "Defines functions to check if pushgateway is available, push metrics to pushgateway, and initialize metrics for external API calls and Celery jobs.", "keyObjects": ["is_pushgateway_available", "push_metrics", "api_call_counter", "celery_job_counter", "celery_job_time_spent"]}, "token_usage": {"completion_tokens": 295, "prompt_tokens": 990, "total_tokens": 1285}, "elapsed_time": 7589.109182357788}
{"request_meta": {"code_file_path": "utils\\send_msg.py"}, "structured": {"isImportant": true, "functions": "This code file contains a function to send SMS messages using the Aliyun SMS service. The function takes a mobile number and a code as input and sends a SMS message to the mobile number with the provided code. The function uses the Aliyun SDK to make the API call to send the SMS message.", "keyObjects": ["send_sms", "AcsClient", "CommonRequest"]}, "token_usage": {"completion_tokens": 222, "prompt_tokens": 1023, "total_tokens": 1245}, "elapsed_time": 5825.525999069214}
{"request_meta": {"code_file_path": "utils\\train_model.py"}}
{"request_meta": {"code_file_path": "utils\\transform.py"}, "structured": {"isImportant": true, "functions": "camel_case_2_underscore: Transforms variable names from camel case to underscore case", "keyObjects": ["re (Python's regular expression module)"]}, "token_usage": {"completion_tokens": 222, "prompt_tokens": 849, "total_tokens": 1071}, "elapsed_time": 5687.598466873169}
{"request_meta": {"code_file_path": "utils\\__init__.py"}}
{"request_meta": {"code_file_path": "utils\\api_util\\apis.py"}}
{"request_meta": {"code_file_path": "utils\\api_util\\file_api.py"}}
{"request_meta": {"code_file_path": "utils\\api_util\\funcs.py"}}
{"request_meta": {"code_file_path": "utils\\api_util\\thread_funcs.py"}}
{"request_meta": {"code_file_path": "utils\\celery_util\\celeryer.py"}}
{"request_meta": {"code_file_path": "utils\\celery_util\\const.py"}, "structured": {"isImportant": true, "functions": "Defines constants used in the Celery configuration, including the expiration time for task results, the Redis password (if any), the Redis endpoint, and the database numbers for the Celery broker and result backend.", "keyObjects": ["CeleryConst"]}, "token_usage": {"completion_tokens": 215, "prompt_tokens": 871, "total_tokens": 1086}, "elapsed_time": 5524.414300918579}
{"request_meta": {"code_file_path": "utils\\celery_util\\funcs.py"}, "structured": {"isImportant": true, "functions": "The TaskCache class provides utility functions to manage Celery tasks. It includes methods to add a task, remove a task, and read all tasks from a JSON file. The class also handles the situation where a Celery task is interrupted during code updates.", "keyObjects": ["TaskCache"]}, "token_usage": {"completion_tokens": 200, "prompt_tokens": 1858, "total_tokens": 2058}, "elapsed_time": 5825.888395309448}
{"request_meta": {"code_file_path": "utils\\celery_util\\recover_tasks.py"}}
{"request_meta": {"code_file_path": "utils\\celery_util\\__init__.py"}, "structured": {"isImportant": true, "functions": "Pre-imports certain modules to optimize performance of the application.", "keyObjects": ["importlib", "sys"]}, "token_usage": {"completion_tokens": 275, "prompt_tokens": 736, "total_tokens": 1011}, "elapsed_time": 7219.941854476929}
{"request_meta": {"code_file_path": "utils\\celery_util\\edu\\graph_import.py"}}
{"request_meta": {"code_file_path": "utils\\celery_util\\edu\\graph_merge.py"}}
{"request_meta": {"code_file_path": "utils\\celery_util\\edu\\tasks.py"}}
{"request_meta": {"code_file_path": "utils\\celery_util\\edu\\task_base.py"}}
{"request_meta": {"code_file_path": "utils\\celery_util\\edu\\task_funcs.py"}}
{"request_meta": {"code_file_path": "utils\\celery_util\\edu\\__init__.py"}, "structured": {"isImportant": true, "functions": "This file may contain utility functions or classes related to Celery, a distributed task queue used for asynchronous processing. These could be used to manage and distribute tasks related to data extraction and processing.", "keyObjects": ["Celery-related classes or functions"]}, "token_usage": {"completion_tokens": 237, "prompt_tokens": 656, "total_tokens": 893}, "elapsed_time": 6245.649099349976}
{"request_meta": {"code_file_path": "utils\\celery_util\\edu_cron\\autoupdate_discovery.py"}}
{"request_meta": {"code_file_path": "utils\\celery_util\\edu_cron\\clear_data.py"}}
{"request_meta": {"code_file_path": "utils\\celery_util\\edu_cron\\tasks.py"}, "structured": {"isImportant": true, "functions": "The code file contains Celery tasks that are scheduled to run at specific times. These tasks perform various functions such as updating graphs, clearing expired data, and testing cron functions.", "keyObjects": ["graph_autoupdate_discovery", "clear_expire_data", "test_cron_func"]}, "token_usage": {"completion_tokens": 223, "prompt_tokens": 1623, "total_tokens": 1846}, "elapsed_time": 6576.124429702759}
{"request_meta": {"code_file_path": "utils\\celery_util\\edu_cron\\__init__.py"}, "structured": {"isImportant": true, "functions": "Contains scheduled tasks for the educational platform. These tasks might involve data extraction and relationship mapping from various educational materials.", "keyObjects": ["Celery tasks", "Scheduled tasks"]}, "token_usage": {"completion_tokens": 178, "prompt_tokens": 659, "total_tokens": 837}, "elapsed_time": 4506.454229354858}
{"request_meta": {"code_file_path": "utils\\file_util\\extract_major_data.py"}, "structured": {"isImportant": true, "functions": "This code file is responsible for extracting major data from a docx file and storing it in the edu_dict_data table. The extracted data includes the main category, sub-category, and major of a subject. The main category is a broad category of subjects, such as 'Philosophy' or 'Economics'. The sub-category is a specific category within the main category, and the major is the name of the subject.", "keyObjects": ["ExtractMajorData", "BaseCurd"]}, "token_usage": {"completion_tokens": 129, "prompt_tokens": 1905, "total_tokens": 2034}, "elapsed_time": 4037.215232849121}
{"request_meta": {"code_file_path": "utils\\parse_util\\asr.py"}}
{"request_meta": {"code_file_path": "utils\\parse_util\\asr_utils.py"}}
{"request_meta": {"code_file_path": "utils\\parse_util\\ocr.py"}}
{"request_meta": {"code_file_path": "utils\\parse_util\\ocr_utils.py"}}
{"request_meta": {"code_file_path": "utils\\parse_util\\parse_file.py"}}
{"request_meta": {"code_file_path": "utils\\parse_util\\__init__.py"}, "structured": {"isImportant": true, "functions": "Imports and utilizes OCR and ASR parsing functions for the educational platform's backend repository.", "keyObjects": ["parse_file_ocr", "parse_file_asr"]}, "token_usage": {"completion_tokens": 283, "prompt_tokens": 666, "total_tokens": 949}, "elapsed_time": 7105.399131774902}
